import numpy as np
from sklearn.datasets import load_iris
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import StandardScaler
from tensorflow.keras.utils import to_categorical
from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import Dense
import joblib

iris = load_iris()
X = iris.data.astype(np.float32)
y = iris.target.astype(np.int32)

X_trainval, X_test, y_trainval, y_test = train_test_split(
    X, y, test_size=0.2, random_state=42, stratify=y
)
X_train, X_val, y_train, y_val = train_test_split(
    X_trainval, y_trainval, test_size=0.25, random_state=42, stratify=y_trainval
)
#Scale Data
scaler = StandardScaler()
scaler.fit(X_train)                  # Fit ONLY on training data

X_train_scaled = scaler.transform(X_train)
X_val_scaled = scaler.transform(X_val)
X_test_scaled = scaler.transform(X_test)

# Save scaler for inference
joblib.dump(scaler, "scaler.save")

#One-hot Encode Label
y_train_cat = to_categorical(y_train, num_classes=3)
y_val_cat = to_categorical(y_val, num_classes=3)
y_test_cat = to_categorical(y_test, num_classes=3)

# Build Model
model = Sequential([
    Dense(16, activation='relu', input_shape=(4,)),
    Dense(12, activation='relu'),
    Dense(3, activation='softmax')
])
model.summary()

model.compile(optimizer='adam',
              loss='categorical_crossentropy',
              metrics=['accuracy'])
# Train Model
model.fit(
    X_train_scaled, y_train_cat,
    epochs=100,
    batch_size=5,
    validation_data=(X_val_scaled, y_val_cat),
    verbose=1
)

# Save model 
model.save("iris_dnn_model.keras")

import tensorflow as tf

model = tf.keras.models.load_model("iris_dnn_model.keras")
converter = tf.lite.TFLiteConverter.from_keras_model(model)
tflite_model = converter.convert()

with open("IRISmodel.tflite", "wb") as f:
    f.write(tflite_model)

