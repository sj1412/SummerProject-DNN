# binary classification of setosa and versicolor iris flowers
from sklearn.datasets import load_iris
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import StandardScaler
import numpy as np
import tensorflow as tf

# Load data
iris = load_iris()
X = iris.data
y = iris.target

# Filter only Setosa (0) and Versicolor (1)
X = X[y < 2]
y = y[y < 2]  # Now y contains only 0 or 1

# Normalize features
scaler = StandardScaler()
X_scaled = scaler.fit_transform(X)

# Train-test split
X_train, X_test, y_train, y_test = train_test_split(X_scaled, y, test_size=0.2, random_state=42)
# Second split: train and validation
X_train, X_val, y_train, y_val = train_test_split(X_train, y_train, test_size=0.25, random_state=42)

#build model
model = tf.keras.Sequential([
    tf.keras.layers.Dense(8, activation='relu', input_shape=(X.shape[1],)),
    tf.keras.layers.Dense(6, activation='relu'),
    tf.keras.layers.Dense(4, activation='relu'),
    tf.keras.layers.Dense(1, activation='sigmoid')  # Binary output
])
model.summary()
#compile model
model.compile(optimizer='adam', loss='binary_crossentropy', metrics=['accuracy'])

#train model
hostory=model.fit(X_train, y_train, epochs=50, validation_data=(X_val, y_val), verbose=1)

#save model
model.save("binary.keras")

loss, acc = model.evaluate(X_test, y_test)
print(f"Test Accuracy: {acc:.4f}")

# Convert to TFLite
model = tf.keras.models.load_model("binary.keras")
converter = tf.lite.TFLiteConverter.from_keras_model(model)
tflite_model = converter.convert()

# Save TFLite model
with open("iris_binary_classification.tflite", "wb") as f:
    f.write(tflite_model)
# Predict first 5 test samples
pred = model.predict(X_test[:5])

# Convert probabilities to class labels (0 or 1)
class_pred = (pred > 0.5).astype(int).ravel()

# Map to flower names
label_map = {0: "Setosa", 1: "Versicolor"}
predicted_names = [label_map[i] for i in class_pred]

# Print results
print("Raw probabilities:", pred.ravel())
print("Class predictions:", class_pred)
print("Predicted flower names:", predicted_names)

from sklearn.metrics import accuracy_score, precision_score, recall_score, f1_score, confusion_matrix, roc_auc_score

# Binary prediction threshold
y_pred = (model.predict(X_test) > 0.5).astype(int).ravel()

# Metrics
print("Accuracy:", accuracy_score(y_test, y_pred))
print("Precision:", precision_score(y_test, y_pred))
print("Recall:", recall_score(y_test, y_pred))
print("F1 Score:", f1_score(y_test, y_pred))
print("AUC Score:", roc_auc_score(y_test, model.predict(X_test).ravel()))
from sklearn.metrics import accuracy_score
accuracy = accuracy_score(y_test, y_pred)
from sklearn.metrics import precision_score
precision = precision_score(y_test, y_pred)
from sklearn.metrics import recall_score
recall = recall_score(y_test, y_pred)
from sklearn.metrics import f1_score
f1 = f1_score(y_test, y_pred)
from sklearn.metrics import confusion_matrix
cm = confusion_matrix(y_test, y_pred)
print(cm)
